{"version":3,"sources":["Components/Chart.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Chart","props","state","persons","chartData","labels","datasets","label","data","backgroundColor","axios","get","then","res","console","log","setState","className","this","options","map","pe","name","Component","App","style","width","height","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"iPAgEeA,E,YA5Dd,WAAYC,GAAO,IAAD,8BACjB,4CAAMA,KACDC,MAAO,CACXC,QAAS,GACTC,UAAU,CACTC,OAAO,CAAC,SAAS,SAAS,SAAS,UACnCC,SAAS,CACN,CACCC,MAAM,WACNC,KAAK,CAAC,IAAI,IAAI,IAAI,KAClBC,gBAAgB,CACf,0BACA,0BACA,0BACA,+BAdU,E,iFA0BG,IAAD,OACjBC,IAAMC,IAAN,8CACGC,MAAK,SAAAC,GACLC,QAAQC,IAAIF,GACZ,IAAMV,EAAUU,EAAIL,KACnB,EAAKQ,SAAS,CAAEb,QAASA,S,+BAW/B,OACC,yBAAKc,UAAU,SACd,kBAAC,IAAD,CACGT,KAAMU,KAAKhB,MAAME,UAEjBe,QAAS,KAKZ,6BACSD,KAAKhB,MAAMC,QAAQiB,KAAI,SAAAC,GAAE,OAAI,2BAAIA,EAAGC,e,GAtD7BC,aCWLC,MATf,WACE,OACE,yBAAKP,UAAU,MAAMQ,MAAO,CAACC,MAAO,IAAKC,OAAQ,IAAKlB,gBAAiB,eAEvE,kBAAC,EAAD,CAAQkB,OAAO,UCGCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,MAAK,SAAA4B,GACjCA,EAAaC,iB,6EEnInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.f3ab9a12.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {Bar,Line,Pie} from 'react-chartjs-2';\r\nimport axios from 'axios';\r\nclass Chart extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state= {\r\n\t\t\tpersons: [],\r\n\t\t\tchartData:{\r\n\t\t\t\tlabels:['Store1','Store2','Store3','Store4'],\r\n\t\t\t\tdatasets:[\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlabel:'Quantity',\r\n\t\t\t\t\t\t\t\tdata:[400,300,500,213],\r\n\t\t\t\t\t\t\t\tbackgroundColor:[\r\n\t\t\t\t\t\t\t\t\t'rgba(255, 99, 132, 0.6)',\r\n\t\t\t\t\t\t\t\t\t'rgba(54, 161, 235, 0.6)',\r\n\t\t\t\t\t\t\t\t\t'rgba(255, 206, 86, 0.6)',\r\n\t\t\t\t\t\t\t\t\t'rgba(75, 109, 132, 0.6)'\r\n\t\t\t\t\t\t\t\t]\r\n\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t          ]\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n    axios.get(`https://jsonplaceholder.typicode.com/users`)\r\n      .then(res => {\r\n      \tconsole.log(res);\r\n      \tconst persons = res.data;\r\n        this.setState({ persons: persons});\r\n      })\r\n  \t}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div className=\"chart\">\r\n\t\t\t\t<Bar\r\n\t\t\t\t\t  data={this.state.chartData}\r\n\t\t\t\t\t  \r\n\t\t\t\t\t  options={{ \r\n\t\t\t\t\t  \t\r\n\t\t\t\t\t  }}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<div>\r\n        \t\t\t{ this.state.persons.map(pe => <p>{pe.name}</p>)}\r\n        \t\t</div>\r\n        \t\t\t\t\r\n\t\t\t </div>\r\n\t\t\t)\r\n\t}\r\n}\r\nexport default Chart;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Chart from './Components/Chart'\n\nfunction App() {\n  return (\n    <div className=\"App\" style={{width: 500, height: 300, backgroundColor: 'powderblue'}}>\n     \n    <Chart  height='200'/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}